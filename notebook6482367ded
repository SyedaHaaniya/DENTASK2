{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9165238,"sourceType":"datasetVersion","datasetId":5537783}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:57:20.997521Z","iopub.execute_input":"2024-08-13T10:57:20.997911Z","iopub.status.idle":"2024-08-13T10:57:22.016153Z","shell.execute_reply.started":"2024-08-13T10:57:20.997881Z","shell.execute_reply":"2024-08-13T10:57:22.014961Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"# Load the dataset\ndf = pd.read_csv('/kaggle/input/emailspam/spam.csv', encoding='latin-1')\n\n# Display the first few rows of the dataset\ndf.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:58:21.616281Z","iopub.execute_input":"2024-08-13T10:58:21.616646Z","iopub.status.idle":"2024-08-13T10:58:21.669534Z","shell.execute_reply.started":"2024-08-13T10:58:21.616617Z","shell.execute_reply":"2024-08-13T10:58:21.668342Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"     v1                                                 v2 Unnamed: 2  \\\n0   ham  Go until jurong point, crazy.. Available only ...        NaN   \n1   ham                      Ok lar... Joking wif u oni...        NaN   \n2  spam  Free entry in 2 a wkly comp to win FA Cup fina...        NaN   \n3   ham  U dun say so early hor... U c already then say...        NaN   \n4   ham  Nah I don't think he goes to usf, he lives aro...        NaN   \n\n  Unnamed: 3 Unnamed: 4  \n0        NaN        NaN  \n1        NaN        NaN  \n2        NaN        NaN  \n3        NaN        NaN  \n4        NaN        NaN  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>v1</th>\n      <th>v2</th>\n      <th>Unnamed: 2</th>\n      <th>Unnamed: 3</th>\n      <th>Unnamed: 4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>ham</td>\n      <td>Go until jurong point, crazy.. Available only ...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>ham</td>\n      <td>Ok lar... Joking wif u oni...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>spam</td>\n      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>ham</td>\n      <td>U dun say so early hor... U c already then say...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ham</td>\n      <td>Nah I don't think he goes to usf, he lives aro...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Drop any irrelevant columns\ndf = df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], axis=1)\n\n# Rename columns for clarity\ndf.columns = ['label', 'message']\n\n# Convert labels to a binary format\ndf['label'] = df['label'].map({'ham': 0, 'spam': 1})\n\n# Check for any missing values\ndf.isnull().sum()\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:58:39.590972Z","iopub.execute_input":"2024-08-13T10:58:39.591359Z","iopub.status.idle":"2024-08-13T10:58:39.613949Z","shell.execute_reply.started":"2024-08-13T10:58:39.591331Z","shell.execute_reply":"2024-08-13T10:58:39.612656Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"label      0\nmessage    0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(df['message'], df['label'], test_size=0.2, random_state=42)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:59:05.347525Z","iopub.execute_input":"2024-08-13T10:59:05.347953Z","iopub.status.idle":"2024-08-13T10:59:05.356767Z","shell.execute_reply.started":"2024-08-13T10:59:05.347920Z","shell.execute_reply":"2024-08-13T10:59:05.355435Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"# Initialize TF-IDF Vectorizer\nvectorizer = TfidfVectorizer(stop_words='english')\n\n# Transform the text data into TF-IDF features\nX_train_tfidf = vectorizer.fit_transform(X_train)\nX_test_tfidf = vectorizer.transform(X_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:59:18.468254Z","iopub.execute_input":"2024-08-13T10:59:18.468621Z","iopub.status.idle":"2024-08-13T10:59:18.601844Z","shell.execute_reply.started":"2024-08-13T10:59:18.468590Z","shell.execute_reply":"2024-08-13T10:59:18.600532Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Initialize the model\nmodel = MultinomialNB()\n\n# Train the model\nmodel.fit(X_train_tfidf, y_train)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:59:34.761628Z","iopub.execute_input":"2024-08-13T10:59:34.762074Z","iopub.status.idle":"2024-08-13T10:59:34.779491Z","shell.execute_reply.started":"2024-08-13T10:59:34.762042Z","shell.execute_reply":"2024-08-13T10:59:34.778038Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"MultinomialNB()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MultinomialNB()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MultinomialNB</label><div class=\"sk-toggleable__content\"><pre>MultinomialNB()</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"# Predict the labels on the test set\ny_pred = model.predict(X_test_tfidf)\n\n# Evaluate the model\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(\"\\nClassification Report:\\n\", classification_report(y_test, y_pred))\nprint(\"\\nConfusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T10:59:53.834303Z","iopub.execute_input":"2024-08-13T10:59:53.834669Z","iopub.status.idle":"2024-08-13T10:59:53.853702Z","shell.execute_reply.started":"2024-08-13T10:59:53.834643Z","shell.execute_reply":"2024-08-13T10:59:53.852401Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Accuracy: 0.9668161434977578\n\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       0.96      1.00      0.98       965\n           1       1.00      0.75      0.86       150\n\n    accuracy                           0.97      1115\n   macro avg       0.98      0.88      0.92      1115\nweighted avg       0.97      0.97      0.96      1115\n\n\nConfusion Matrix:\n [[965   0]\n [ 37 113]]\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.svm import SVC\nfrom sklearn.model_selection import GridSearchCV\n\n# Define the parameter grid for SVM\nparam_grid = {\n    'C': [0.1, 1, 10, 100],\n    'gamma': [1, 0.1, 0.01, 0.001],\n    'kernel': ['linear', 'rbf']\n}\n\n# Initialize the SVM model\nsvm_model = SVC()\n\n# Initialize GridSearchCV with cross-validation\ngrid = GridSearchCV(svm_model, param_grid, refit=True, verbose=2, cv=5)\n\n# Fit the model\ngrid.fit(X_train_tfidf, y_train)\n\n# Print the best parameters found by GridSearchCV\nprint(\"Best Parameters found by GridSearchCV:\")\nprint(grid.best_params_)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T11:00:51.927505Z","iopub.execute_input":"2024-08-13T11:00:51.927943Z","iopub.status.idle":"2024-08-13T11:02:30.552480Z","shell.execute_reply.started":"2024-08-13T11:00:51.927911Z","shell.execute_reply":"2024-08-13T11:02:30.550861Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Fitting 5 folds for each of 32 candidates, totalling 160 fits\n[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n[CV] END ......................C=0.1, gamma=1, kernel=linear; total time=   0.6s\n[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   1.0s\n[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   1.1s\n[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   1.0s\n[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   1.0s\n[CV] END .........................C=0.1, gamma=1, kernel=rbf; total time=   1.0s\n[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.6s\n[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.6s\n[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.6s\n[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.6s\n[CV] END ....................C=0.1, gamma=0.1, kernel=linear; total time=   0.6s\n[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END .......................C=0.1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n[CV] END ...................C=0.1, gamma=0.01, kernel=linear; total time=   0.6s\n[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ......................C=0.1, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n[CV] END ..................C=0.1, gamma=0.001, kernel=linear; total time=   0.6s\n[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .....................C=0.1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.4s\n[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.5s\n[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.5s\n[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.5s\n[CV] END ........................C=1, gamma=1, kernel=linear; total time=   0.5s\n[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   1.2s\n[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   1.2s\n[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END ...........................C=1, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.5s\n[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.5s\n[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.5s\n[CV] END ......................C=1, gamma=0.1, kernel=linear; total time=   0.5s\n[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END .........................C=1, gamma=0.1, kernel=rbf; total time=   0.7s\n[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.5s\n[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.5s\n[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.5s\n[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.5s\n[CV] END .....................C=1, gamma=0.01, kernel=linear; total time=   0.5s\n[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END ........................C=1, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.5s\n[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.5s\n[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ....................C=1, gamma=0.001, kernel=linear; total time=   0.5s\n[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .......................C=1, gamma=0.001, kernel=rbf; total time=   0.5s\n[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.4s\n[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.4s\n[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.4s\n[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.4s\n[CV] END .......................C=10, gamma=1, kernel=linear; total time=   0.4s\n[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END ..........................C=10, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END .....................C=10, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END ........................C=10, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ....................C=10, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END .......................C=10, gamma=0.01, kernel=rbf; total time=   0.6s\n[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ...................C=10, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.7s\n[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.6s\n[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.6s\n[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.6s\n[CV] END ......................C=10, gamma=0.001, kernel=rbf; total time=   0.6s\n[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.4s\n[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.4s\n[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.4s\n[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.4s\n[CV] END ......................C=100, gamma=1, kernel=linear; total time=   0.4s\n[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END .........................C=100, gamma=1, kernel=rbf; total time=   1.3s\n[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END ....................C=100, gamma=0.1, kernel=linear; total time=   0.4s\n[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END .......................C=100, gamma=0.1, kernel=rbf; total time=   0.6s\n[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ...................C=100, gamma=0.01, kernel=linear; total time=   0.4s\n[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ......................C=100, gamma=0.01, kernel=rbf; total time=   0.5s\n[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END ..................C=100, gamma=0.001, kernel=linear; total time=   0.4s\n[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.6s\n[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.7s\n[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.7s\n[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.6s\n[CV] END .....................C=100, gamma=0.001, kernel=rbf; total time=   0.6s\nBest Parameters found by GridSearchCV:\n{'C': 100, 'gamma': 0.01, 'kernel': 'rbf'}\n","output_type":"stream"}]},{"cell_type":"code","source":"# Predict the labels on the test set using the best model\ny_pred_svm = grid.best_estimator_.predict(X_test_tfidf)\n\n# Evaluate the fine-tuned model\nprint(\"Accuracy of fine-tuned model:\", accuracy_score(y_test, y_pred_svm))\nprint(\"\\nClassification Report for fine-tuned model:\\n\", classification_report(y_test, y_pred_svm))\nprint(\"\\nConfusion Matrix for fine-tuned model:\\n\", confusion_matrix(y_test, y_pred_svm))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T11:02:37.043956Z","iopub.execute_input":"2024-08-13T11:02:37.044347Z","iopub.status.idle":"2024-08-13T11:02:37.198956Z","shell.execute_reply.started":"2024-08-13T11:02:37.044320Z","shell.execute_reply":"2024-08-13T11:02:37.197721Z"},"trusted":true},"execution_count":13,"outputs":[{"name":"stdout","text":"Accuracy of fine-tuned model: 0.9820627802690582\n\nClassification Report for fine-tuned model:\n               precision    recall  f1-score   support\n\n           0       0.98      0.99      0.99       965\n           1       0.96      0.90      0.93       150\n\n    accuracy                           0.98      1115\n   macro avg       0.97      0.95      0.96      1115\nweighted avg       0.98      0.98      0.98      1115\n\n\nConfusion Matrix for fine-tuned model:\n [[960   5]\n [ 15 135]]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Compare Naive Bayes and fine-tuned SVM\nprint(\"Naive Bayes Accuracy:\", accuracy_score(y_test, y_pred))\nprint(\"Fine-tuned SVM Accuracy:\", accuracy_score(y_test, y_pred_svm))\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T11:02:53.903380Z","iopub.execute_input":"2024-08-13T11:02:53.903778Z","iopub.status.idle":"2024-08-13T11:02:53.913942Z","shell.execute_reply.started":"2024-08-13T11:02:53.903727Z","shell.execute_reply":"2024-08-13T11:02:53.912604Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"Naive Bayes Accuracy: 0.9668161434977578\nFine-tuned SVM Accuracy: 0.9820627802690582\n","output_type":"stream"}]}]}